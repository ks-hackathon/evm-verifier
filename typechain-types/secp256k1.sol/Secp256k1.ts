/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface Secp256k1Interface extends Interface {
  getFunction(nameOrSignature: "_add" | "_mul"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_add",
    values: [
      [BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_mul",
    values: [BigNumberish, [BigNumberish, BigNumberish]]
  ): string;

  decodeFunctionResult(functionFragment: "_add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_mul", data: BytesLike): Result;
}

export interface Secp256k1 extends BaseContract {
  connect(runner?: ContractRunner | null): Secp256k1;
  waitForDeployment(): Promise<this>;

  interface: Secp256k1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _add: TypedContractMethod<
    [
      P: [BigNumberish, BigNumberish, BigNumberish],
      Q: [BigNumberish, BigNumberish, BigNumberish]
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;

  _mul: TypedContractMethod<
    [d: BigNumberish, P: [BigNumberish, BigNumberish]],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_add"
  ): TypedContractMethod<
    [
      P: [BigNumberish, BigNumberish, BigNumberish],
      Q: [BigNumberish, BigNumberish, BigNumberish]
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "_mul"
  ): TypedContractMethod<
    [d: BigNumberish, P: [BigNumberish, BigNumberish]],
    [[bigint, bigint, bigint]],
    "view"
  >;

  filters: {};
}
